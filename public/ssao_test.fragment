precision highp float;
        
varying vec2 vUV;
varying vec4 vPosition;

uniform sampler2D textureSampler;
uniform sampler2D normalTexture;
uniform sampler2D depthTexture;
uniform sampler2D noiseTexture;
uniform sampler2D positionTexture;

uniform float radius;
uniform int numSamples;
uniform vec3 kernelSphere[16]; 
uniform float fallOff;
uniform float area;
uniform float bias;
uniform float near;
uniform float far;

uniform mat4 projection; 
uniform mat4 view; 

vec3 getRandomVec3(vec2 uv){
    return normalize( 
        vec3( texture2D(noiseTexture, uv).rg * 2.0 - 1.0,
        0.0) 
    );
}

vec3 viewSpaceToWorldSpace(vec3 v){
    return (inverse(view) * vec4(v, 1.0)).xyz;
}

vec3 clipSpaceToViewSpace(vec3 v){
    mat4 projectionIN = inverse(projection);
    vec4 v4 = (projectionIN * vec4(v, 1.0));
    v4.w = 1.0 / v4.w;
    v4.x *= v4.w;
    v4.y *= v4.w;
    v4.z *= v4.w;
    return v4.xyz;
}

float ambientOcclusion(vec2 uv, vec2 offset, vec3 pos, vec3 normal){
    float d = texture2D(depthTexture, vUV + offset).r;
    vec3 o = vec3((vUV + offset) * 2.0 - 1.0, d);
    mat4 projectionIN = inverse(projection);
    vec4 diff4 = ( projectionIN * vec4(o, 1.0));
    vec3 diff = diff4.xyz / diff4.w;
    diff = diff - pos;
    vec3 diffNorm = normalize(diff);
    return max(0.0, dot(normal, diffNorm) - 0.5);
}

void main(void){
    // Linear depth from texture
    float depth = texture2D(depthTexture, vUV).r;
    // Screen Space Fragment Position (z scale in ss and vs don't vary) screen space (* 2.0 - 1.0) - > clip space
    vec3 CS_fragPos = vec3(vUV * 2.0 - 1.0, depth);

    // View Space Fragment Position 
    mat4 projectionIN = inverse(projection);
    vec4 VS_fragPos4 = ( projectionIN * vec4(CS_fragPos, 1.0));
    // vec3 VS_fragPos = VS_fragPos4.xyz;
    vec3 VS_fragPos = VS_fragPos4.xyz / VS_fragPos4.w;
    // vec3 VS_fragPos = VS_fragPos4.xyz;
    // Camera is looking at z negativas
    // VS_fragPos.z = -VS_fragPos.z;

                    
    // View Space Normal DONT NORMALIZE
    vec3 fragN = texture2D(normalTexture, vUV).xyz;
    fragN = fragN * 2.0 - 1.0;

    // TBN:
    //Tangent Space randomVec
    vec3 randomVec = getRandomVec3(vUV); 
    // randomVec = vec3(1.0, 0.0, 0.0);
    //Generate kernelSphere rotated along surface normal -> use TBN matrix 
    vec3 tangent = normalize(randomVec - fragN * dot(randomVec, fragN));
    //gram schmidt:
    // tangent = normalize(tangent - fragN * dot(tangent, fragN));
    vec3 binormal = cross(fragN, tangent);
    mat3 TBN = mat3(tangent, binormal, fragN);

    //The further the distance the bigger the radius in view space 
    float scale = radius / depth; 

    float ao = 0.0;
    float weight = 0.0;
    float prueba = 0.0;
    float offsetNAngleNeg = 0.0;
    vec3 pruebaVec = vec3(0.0, 0.0, 0.0);
    

    vec2 y = vec2(0.0, 0.01);
    vec2 x = vec2(0.01, 0.0);

    ao += ambientOcclusion(vUV, x, VS_fragPos, fragN);
    ao += ambientOcclusion(vUV, -x, VS_fragPos, fragN);
    ao += ambientOcclusion(vUV, y, VS_fragPos, fragN);
    ao += ambientOcclusion(vUV, -y, VS_fragPos, fragN);


    // ao /= 4.0;
    ao = clamp(ao, 0.0, 1.0);
    ao = 1.0 - ao;


    // pruebaVec = VS_fragPos;
    
    gl_FragColor = vec4(depth, depth, depth, 1);
    gl_FragColor = vec4(VS_fragPos.z, VS_fragPos.z, VS_fragPos.z, 1);
    // gl_FragColor = texture2D(noiseTexture, vUV);
    // gl_FragColor = vec4(tangent, 1);
    // gl_FragColor = vec4(binormal, 1);
    gl_FragColor = vec4(fragN, 1);
    // gl_FragColor = texture2D(textureSampler, vUV);
    gl_FragColor = vec4(ao, ao, ao, 1);
    // gl_FragColor = vec4(pruebaVec, 1);
    // gl_FragColor = vec4(prueba, prueba, prueba, 1);

    // gl_FragColor = vec4(prueba, offsetNAngleNeg, 0.0, 1);

    // gl_FragColor = texture2D(textureSampler, vUV) - vec4(ao, ao, ao, 0);
    gl_FragColor = texture2D(positionTexture, vUV);
}